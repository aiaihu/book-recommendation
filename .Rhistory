ratings <- ratings %>% group_by(user_id) %>% sample_frac(.5)
cat('Number of ratings (after): ', nrow(ratings))
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating))) +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
#group by book_id,then do the plot
ratings %>%
group_by(book_id) %>%
summarize(number_of_ratings_per_book = n()) %>%
ggplot(aes(number_of_ratings_per_book)) +
geom_bar(fill = "green", color = "grey20",width = 1) +
coord_cartesian(c(100, 3000))
ratings %>%
group_by(user_id) %>%
summarize(number_of_ratings_per_user = n()) %>%
ggplot(aes(number_of_ratings_per_user)) +
geom_bar(fill = "cadetblue3", color = "grey20") + coord_cartesian(c(3, 200))
#group by book_id and get mean of rating for each book_id. We get a new dataset with column mean_perbook
rating_perbook<-ratings %>%
group_by(book_id) %>%
mutate(mean_perbook = mean(rating, na.rm=T))
ggplot(rating_perbook, aes(mean_perbook))+geom_histogram(fill = "orange", color = "grey20", bins = 30) + coord_cartesian(c(1,5))
ratings %>%
group_by(user_id) %>%
summarize(mean_per_user_rating = mean(rating)) %>%
ggplot(aes(mean_per_user_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
ratings %>%
group_by(user_id) %>%
summarize(mean_rating =mean(rating), number_of_rated_books =n())%>%
ggplot(aes(number_of_rated_books, mean_rating))+stat_bin_hex(bins =50) +scale_fill_distiller(palette ="Spectral")+
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
# list of varialbe names in the books dataset
names(books)
#import some libraries
library(grid)
library(ggplot2)
library(lattice)
#language: English(this will include en-US, en-GB,eng,en-CA)
p_english <- books %>%
mutate(language = factor(language_code)) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "language", title = "English") + guides(fill = FALSE)
P_non_english <- books %>%
mutate(language = factor(language_code)) %>%
filter(!language %in% c("en-US", "en-GB", "eng", "en-CA", "")) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "", title = "Non-English") + guides(fill = FALSE)
grid.arrange(p_english,P_non_english, ncol=2)
books %>%
group_by(authors, average_rating) %>%
summarize(mean_per_authors_rating = mean(average_rating)) %>%
ggplot(aes(mean_per_authors_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
books_author <- books %>%
group_by(book_id) %>%
mutate(number_of_authors = length(str_split(authors, ",")[[1]]))
books_author %>% filter(number_of_authors <= 10) %>%
ggplot(aes(number_of_authors, average_rating)) + stat_bin_hex(bins = 50) + scale_fill_distiller(palette = "Spectral") +
stat_smooth(method = "lm", size = 2, color = "orchid", se = FALSE)+
scale_color_gradient()+
theme_bw()
ggplot(books,aes(x=ratings_count, y=average_rating))+
geom_point(aes(color = books_count)) +
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
#import library
library(DT)
library(dplyr)
#use arrange()to sort variable avaerage_rating, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-average_rating) %>%
top_n(10,wt = average_rating) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#use arrange()to sort variable ratings_count, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-ratings_count) %>%
top_n(10,wt = ratings_count) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
# mean of average_rating
mean(books$average_rating)
#correlation matrix, select variables with numeric vaules
books_subset <- books %>%
select(one_of(c("books_count","original_publication_year","ratings_count", "work_ratings_count", "work_text_reviews_count", "average_rating"))) %>%
as.matrix()
corrplot(cor(books_subset,use = 'pairwise.complete.obs'), type = "upper", order = "hclust")
library(caTools)
#To set a seed number
set.seed(1)
#Split dataset. 0.6 indicates 60% training and 40% test data.
spl<-sample.split(ratings,SplitRatio = 0.6)
#spl
train=subset(ratings,spl=="FALSE")
test=subset(ratings,spl=="TRUE")
#remove ratings dataset as we no longer need(we need memory space)
rm(ratings)
gc()
#Create ratings matrix with rows as user_id and columns as book_id.
matrix(data = c(NA, 5, 4, NA, NA, 2, 1, NA, 4, NA, NA, NA, 3, NA, 3), nrow = 3, ncol = 5, byrow = TRUE, dimnames = list(user_id = 6:8, book_id = 1:5))
#creat a dimension_names list based on the train dataset
dimension_names = list(user_id =sort(unique(train$user_id)), book_id=sort(unique(train$book_id)))
#import some library
library(tidyverse)
#Spread a key-value pair across multiple columns.spread() takes two columns (key & value), and spreads into multiple columns: it makes “long” data wider.(will take several minutes due to the large dataset)
ratingmat <- spread(select(train, book_id, user_id, rating), book_id, rating) %>%
select(-user_id)
#Create train dataset matrix with rows as user_id and columns as book_id
ratingmat = as.matrix(ratingmat)
# check the class ratingmat
class(ratingmat)
#set the dimnames of matrix
dimnames(ratingmat)<-dimension_names
#start by loading some libraries
library(recommenderlab)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(DT)
library(knitr)
library(grid)
library(gridExtra)
library(corrplot)
library(methods)
library(Matrix)
library(reshape2)
set.seed(1)
cat('Number of ratings (before): ', nrow(ratings))
#start by loading some libraries
library(recommenderlab)
library(data.table)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
library(DT)
library(knitr)
library(grid)
library(gridExtra)
library(corrplot)
library(methods)
library(Matrix)
library(reshape2)
#set up working directory - this will set the working directory to the same folder as your R studio RMD file - ensure that the CSVs outlined below are also in this folder
set_wd <- function() {
library(rstudioapi) # make sure you have it installed
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
# Read 5 CSV files along with header
books=read.csv("books.csv",header = TRUE)
book_tags=read.csv("book_tags.csv", header = TRUE)
ratings= read.csv("ratings.csv", header = TRUE)
tags = read.csv("tags.csv", header = TRUE)
to_read = read.csv("to_read.csv", header =TRUE)
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
glimpse(to_read)
datatable(head(ratings, 10), class = "nowrap hover row-border", options = list(dom = 't',scrollX = FALSE, autoWidth = TRUE))
glimpse(ratings)
datatable(head(books,5),  class = "nowrap hover row-border", options = list(dom = 't',scrollX = TRUE, autoWidth=TRUE, columnDefs = list(list(width = '100px', targets = c(6)),list(width = '100px', targets = c(5,6)))))
glimpse(books)
datatable(head(book_tags, 10), class = "nowrap hover row-border", options = list(dom = 't',scrollX = FALSE, autoWidth = TRUE))
glimpse(book_tags)
datatable(sample_n(tags, 5), class = "nowrap hover row-border", options = list(dom = 't',scrollX = FALSE, autoWidth = TRUE))
glimpse(tags)
#loading library for identifying duplicated rows.
library(dplyr)
#checking if there are duplicated rows
ratings <- ratings %>%
distinct(user_id, book_id, .keep_all = TRUE)
books <- books %>%
distinct(book_id, .keep_all = TRUE)
#checking missing value for the dataset
colSums(is.na(book_tags))
colSums(is.na(books))
colSums(is.na(ratings))
colSums(is.na(tags))
colSums(is.na(to_read))
books <- select(books, -c("isbn13", "best_book_id"))
set.seed(1)
cat('Number of ratings (before): ', nrow(ratings))
ratings <- ratings %>% group_by(user_id) %>% sample_frac(.5)
cat('Number of ratings (after): ', nrow(ratings))
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating))) +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
#group by book_id,then do the plot
ratings %>%
group_by(book_id) %>%
summarize(number_of_ratings_per_book = n()) %>%
ggplot(aes(number_of_ratings_per_book)) +
geom_bar(fill = "green", color = "grey20",width = 1) +
coord_cartesian(c(100, 3000))
ratings %>%
group_by(user_id) %>%
summarize(number_of_ratings_per_user = n()) %>%
ggplot(aes(number_of_ratings_per_user)) +
geom_bar(fill = "cadetblue3", color = "grey20") + coord_cartesian(c(3, 200))
#group by book_id and get mean of rating for each book_id. We get a new dataset with column mean_perbook
rating_perbook<-ratings %>%
group_by(book_id) %>%
mutate(mean_perbook = mean(rating, na.rm=T))
ggplot(rating_perbook, aes(mean_perbook))+geom_histogram(fill = "orange", color = "grey20", bins = 30) + coord_cartesian(c(1,5))
ratings %>%
group_by(user_id) %>%
summarize(mean_per_user_rating = mean(rating)) %>%
ggplot(aes(mean_per_user_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
ratings %>%
group_by(user_id) %>%
summarize(mean_rating =mean(rating), number_of_rated_books =n())%>%
ggplot(aes(number_of_rated_books, mean_rating))+stat_bin_hex(bins =50) +scale_fill_distiller(palette ="Spectral")+
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
# list of varialbe names in the books dataset
names(books)
#import some libraries
library(grid)
library(ggplot2)
library(lattice)
#language: English(this will include en-US, en-GB,eng,en-CA)
p_english <- books %>%
mutate(language = factor(language_code)) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "language", title = "English") + guides(fill = FALSE)
P_non_english <- books %>%
mutate(language = factor(language_code)) %>%
filter(!language %in% c("en-US", "en-GB", "eng", "en-CA", "")) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "", title = "Non-English") + guides(fill = FALSE)
grid.arrange(p_english,P_non_english, ncol=2)
books %>%
group_by(authors, average_rating) %>%
summarize(mean_per_authors_rating = mean(average_rating)) %>%
ggplot(aes(mean_per_authors_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
books_author <- books %>%
group_by(book_id) %>%
mutate(number_of_authors = length(str_split(authors, ",")[[1]]))
books_author %>% filter(number_of_authors <= 10) %>%
ggplot(aes(number_of_authors, average_rating)) + stat_bin_hex(bins = 50) + scale_fill_distiller(palette = "Spectral") +
stat_smooth(method = "lm", size = 2, color = "orchid", se = FALSE)+
scale_color_gradient()+
theme_bw()
ggplot(books,aes(x=ratings_count, y=average_rating))+
geom_point(aes(color = books_count)) +
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
#import library
library(DT)
library(dplyr)
#use arrange()to sort variable avaerage_rating, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-average_rating) %>%
top_n(10,wt = average_rating) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#use arrange()to sort variable ratings_count, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-ratings_count) %>%
top_n(10,wt = ratings_count) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
# mean of average_rating
mean(books$average_rating)
#correlation matrix, select variables with numeric vaules
books_subset <- books %>%
select(one_of(c("books_count","original_publication_year","ratings_count", "work_ratings_count", "work_text_reviews_count", "average_rating"))) %>%
as.matrix()
corrplot(cor(books_subset,use = 'pairwise.complete.obs'), type = "upper", order = "hclust")
library(caTools)
#To set a seed number
set.seed(1)
#Split dataset. 0.6 indicates 60% training and 40% test data.
spl<-sample.split(ratings,SplitRatio = 0.6)
#spl
train=subset(ratings,spl=="FALSE")
test=subset(ratings,spl=="TRUE")
#remove ratings dataset as we no longer need(we need memory space)
#Create ratings matrix with rows as user_id and columns as book_id.
matrix(data = c(NA, 5, 4, NA, NA, 2, 1, NA, 4, NA, NA, NA, 3, NA, 3), nrow = 3, ncol = 5, byrow = TRUE, dimnames = list(user_id = 6:8, book_id = 1:5))
#creat a dimension_names list based on the train dataset
dimension_names = list(user_id =sort(unique(train$user_id)), book_id=sort(unique(train$book_id)))
#import some library
library(tidyverse)
#Spread a key-value pair across multiple columns.spread() takes two columns (key & value), and spreads into multiple columns: it makes “long” data wider.(will take several minutes due to the large dataset)
ratingmat <- spread(select(train, book_id, user_id, rating), book_id, rating) %>%
select(-user_id)
#Create train dataset matrix with rows as user_id and columns as book_id
ratingmat = as.matrix(ratingmat)
# check the class ratingmat
class(ratingmat)
#set the dimnames of matrix
dimnames(ratingmat)<-dimension_names
#spl
train=subset(ratings,spl=="FALSE")
test=subset(ratings,spl=="TRUE")
#spl
train=subset(ratings,spl=="FALSE")
test=subset(ratings,spl=="TRUE")
#Spread a key-value pair across multiple columns.spread() takes two columns (key & value), and spreads into multiple columns: it makes “long” data wider.(will take several minutes due to the large dataset)
ratingmat <- spread(select(train, book_id, user_id, rating), book_id, rating) %>%
select(-user_id)
#set the dimnames of matrix
dimnames(ratingmat)<-dimension_names
#Create train dataset matrix with rows as user_id and columns as book_id
ratingmat = as.matrix(ratingmat)
# check the class ratingmat
class(ratingmat)
#set the dimnames of matrix
dimnames(ratingmat)<-dimension_names
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating)), title = "Fig.1"") +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating)), title = "Fig.1") +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating))) +
geom_bar(color = "grey10", title ="Fig.1") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating))) +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
#set up working directory - this will set the working directory to the same folder as your R studio RMD file - ensure that the CSVs outlined below are also in this folder
set_wd <- function() {
library(rstudioapi) # make sure you have it installed
current_path <- getActiveDocumentContext()$path
setwd(dirname(current_path ))
print( getwd() )
}
# Read 5 CSV files along with header
books=read.csv("books.csv",header = TRUE)
book_tags=read.csv("book_tags.csv", header = TRUE)
ratings= read.csv("ratings.csv", header = TRUE)
tags = read.csv("tags.csv", header = TRUE)
to_read = read.csv("to_read.csv", header =TRUE)
datatable(sample_n(tags, 5), class = "nowrap hover row-border", options = list(dom = 't',scrollX = FALSE, autoWidth = TRUE))
datatable(head(books,5),  class = "nowrap hover row-border", options = list(dom = 't',scrollX = TRUE, autoWidth=TRUE, columnDefs = list(list(width = '100px', targets = c(6)),list(width = '100px', targets = c(5,6)))))
library(ggplot2)
ratings %>%
ggplot(aes(x = rating, fill = factor(rating))) +
geom_bar(color = "grey10") + scale_fill_brewer(palette = "Dark2") + guides(fill = FALSE)
#group by book_id,then do the plot
ratings %>%
group_by(book_id) %>%
summarize(number_of_ratings_per_book = n()) %>%
ggplot(aes(number_of_ratings_per_book)) +
geom_bar(fill = "green", color = "grey20",width = 1) +
coord_cartesian(c(100, 3000))
ratings %>%
group_by(user_id) %>%
summarize(number_of_ratings_per_user = n()) %>%
ggplot(aes(number_of_ratings_per_user)) +
geom_bar(fill = "cadetblue3", color = "grey20") + coord_cartesian(c(3, 200))
#group by book_id and get mean of rating for each book_id. We get a new dataset with column mean_perbook
rating_perbook<-ratings %>%
group_by(book_id) %>%
mutate(mean_perbook = mean(rating, na.rm=T))
ggplot(rating_perbook, aes(mean_perbook))+geom_histogram(fill = "orange", color = "grey20", bins = 30) + coord_cartesian(c(1,5))
ratings %>%
group_by(user_id) %>%
summarize(mean_per_user_rating = mean(rating)) %>%
ggplot(aes(mean_per_user_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
ratings %>%
group_by(user_id) %>%
summarize(mean_rating =mean(rating), number_of_rated_books =n())%>%
ggplot(aes(number_of_rated_books, mean_rating))+stat_bin_hex(bins =50) +scale_fill_distiller(palette ="Spectral")+
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
#group by book_id and get mean of rating for each book_id. We get a new dataset with column mean_perbook
rating_perbook<-ratings %>%
group_by(book_id) %>%
mutate(mean_perbook = mean(rating, na.rm=T))
ggplot(rating_perbook, aes(mean_perbook))+geom_histogram(fill = "orange", color = "grey20", bins = 30) + coord_cartesian(c(1,5))
ratings %>%
group_by(user_id) %>%
summarize(mean_per_user_rating = mean(rating)) %>%
ggplot(aes(mean_per_user_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
ratings %>%
group_by(user_id) %>%
summarize(mean_rating =mean(rating), number_of_rated_books =n())%>%
ggplot(aes(number_of_rated_books, mean_rating))+stat_bin_hex(bins =50) +scale_fill_distiller(palette ="Spectral")+
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
# list of varialbe names in the books dataset
names(books)
#import some libraries
library(grid)
library(ggplot2)
library(lattice)
#language: English(this will include en-US, en-GB,eng,en-CA)
p_english <- books %>%
mutate(language = factor(language_code)) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "language", title = "English") + guides(fill = FALSE)
P_non_english <- books %>%
mutate(language = factor(language_code)) %>%
filter(!language %in% c("en-US", "en-GB", "eng", "en-CA", "")) %>%
group_by(language) %>%
summarize(number_of_books = n()) %>%
arrange(-number_of_books) %>%
ggplot(aes(reorder(language, number_of_books), number_of_books, fill = reorder(language, number_of_books))) +
geom_bar(stat = "identity", color = "grey20", size = 0.5) + coord_flip() +
labs(x = "", title = "Non-English") + guides(fill = FALSE)
grid.arrange(p_english,P_non_english, ncol=2)
books %>%
group_by(authors, average_rating) %>%
summarize(mean_per_authors_rating = mean(average_rating)) %>%
ggplot(aes(mean_per_authors_rating)) +
geom_histogram(fill = "red", color = "grey20", bins =30)
books_author <- books %>%
group_by(book_id) %>%
mutate(number_of_authors = length(str_split(authors, ",")[[1]]))
books_author %>% filter(number_of_authors <= 10) %>%
ggplot(aes(number_of_authors, average_rating)) + stat_bin_hex(bins = 50) + scale_fill_distiller(palette = "Spectral") +
stat_smooth(method = "lm", size = 2, color = "orchid", se = FALSE)+
scale_color_gradient()+
theme_bw()
ggplot(books,aes(x=ratings_count, y=average_rating))+
geom_point(aes(color = books_count)) +
stat_smooth(method = "lm", color = "orchid", size = 2)+
scale_color_gradient()+
theme_bw()
#import library
library(DT)
library(dplyr)
#use arrange()to sort variable avaerage_rating, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-average_rating) %>%
top_n(10,wt = average_rating) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
#use arrange()to sort variable ratings_count, then get the top 10 books with title, ratings_count, average_rating and authors
books %>%
arrange(-ratings_count) %>%
top_n(10,wt = ratings_count) %>%
select(title, ratings_count, average_rating, authors) %>%
datatable(class = "nowrap hover row-border", escape = FALSE, options = list(dom = 't',scrollX = TRUE, autoWidth = TRUE))
# mean of average_rating
mean(books$average_rating)
#correlation matrix, select variables with numeric vaules
books_subset <- books %>%
select(one_of(c("books_count","original_publication_year","ratings_count", "work_ratings_count", "work_text_reviews_count", "average_rating"))) %>%
as.matrix()
corrplot(cor(books_subset,use = 'pairwise.complete.obs'), type = "upper", order = "hclust")
#To set a seed number
set.seed(1)
#Split dataset. 0.6 indicates 60% training and 40% test data.
spl<-sample.split(ratings,SplitRatio = 0.6)
#spl
train=subset(ratings,spl=="FALSE")
test=subset(ratings,spl=="TRUE")
#Create ratings matrix with rows as user_id and columns as book_id.
matrix(data = c(NA, 5, 4, NA, NA, 2, 1, NA, 4, NA, NA, NA, 3, NA, 3), nrow = 3, ncol = 5, byrow = TRUE, dimnames = list(user_id = 6:8, book_id = 1:5))
#creat a dimension_names list based on the train dataset
dimension_names = list(user_id =sort(unique(train$user_id)), book_id=sort(unique(train$book_id)))
#import some library
library(tidyverse)
#Spread a key-value pair across multiple columns.spread() takes two columns (key & value), and spreads into multiple columns: it makes “long” data wider.(will take several minutes due to the large dataset)
ratingmat <- spread(select(train, book_id, user_id, rating), book_id, rating) %>%
select(-user_id)
#Create train dataset matrix with rows as user_id and columns as book_id
ratingmat = as.matrix(ratingmat)
# check the class ratingmat
class(ratingmat)
#set the dimnames of matrix
dimnames(ratingmat)<-dimension_names
ratingmat[1:5, 1:5]
#check dimension of ratingmat matrix
dim(ratingmat)
# replacing null values in ratingmat dataset with 0(will take several minutes)
ratingmat[is.na(ratingmat)] <- 0
ratingmat = as(ratingmat,"realRatingMatrix")
